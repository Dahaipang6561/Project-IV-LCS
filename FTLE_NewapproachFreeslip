import numpy as np
import matplotlib.pyplot as plt


# time variables
T = 3  # time interval 
dt = 0.01  # integration time step
Nt = int(T / dt)  # The number time steps

NX = 200        # Number of discretized points in x-direction
NY = 200        # Number of discretized points in y-direction
Xstart = -2*np.pi
Xend = 2*np.pi
Ystart = -2*np.pi
Yend = 2*np.pi
Lx = Xend - Xstart
Ly = Yend - Ystart

# Spatial variables + wavenumbers
dx = Lx / (NX-1)
dy = Ly / (NY-1)
xx, yy = np.meshgrid(Xstart+np.arange(NX)*dx, Ystart+np.arange(NY)*dy, indexing='ij')


# define the function of velocity field
def sin_saddle(x, y):
    return np.sin(x), -np.sin(y)


def gradu_sin_saddle(x, y):
    return np.cos(x), np.zeros_like(np.cos(x)), np.zeros_like(np.cos(x)),-np.cos(y)

# setting the I.C.
G11 = np.ones_like(xx)
G12 = np.zeros_like(xx)
G21 = np.zeros_like(xx)
G22 = np.ones_like(xx)

G11_x = np.zeros_like(G11)
G11_y = np.zeros_like(G11)
G12_x = np.zeros_like(G11)
G12_y = np.zeros_like(G11)
G21_x = np.zeros_like(G11)
G21_y = np.zeros_like(G11)
G22_x = np.zeros_like(G11)
G22_y = np.zeros_like(G11)


phi_inv1 = np.zeros([NX, NY, Nt])
phi_inv2 = np.zeros([NX, NY, Nt])

UU, VV  = sin_saddle(xx, yy)
U_dx, U_dy, V_dx, V_dy = gradu_sin_saddle(xx, yy)


# PDE to solve phi_inv(t+1) = phi_inv(t) + dt*(-u * dphi_inv(t)/dx + -v * dphi_inv(t)/dy).
for i in range(Nt):
    # Find the derivatives of phi inverse
   

    G11_x[1:-1,1:-1] = (G11[2:,1:-1] -  G11[:-2,1:-1])/(2*dx)
    G11_y[1:-1,1:-1] = (G11[1:-1,2:] -  G11[1:-1,:-2])/(2*dy)
    G12_x[1:-1,1:-1] = (G12[2:,1:-1] -  G12[:-2,1:-1])/(2*dx)
    G12_y[1:-1,1:-1] = (G12[1:-1,2:] -  G12[1:-1,:-2])/(2*dy)
    G21_x[1:-1,1:-1] = (G21[2:,1:-1] -  G21[:-2,1:-1])/(2*dx)
    G21_y[1:-1,1:-1] = (G21[1:-1,2:] -  G21[1:-1,:-2])/(2*dy)
    G22_x[1:-1,1:-1] = (G22[2:,1:-1] -  G22[:-2,1:-1])/(2*dx)
    G22_y[1:-1,1:-1] = (G22[1:-1,2:] -  G22[1:-1,:-2])/(2*dy)

    G11[1:-1,1:-1] += - dt*(U_dx[1:-1,1:-1]*G11[1:-1,1:-1] + V_dx[1:-1,1:-1]*G12[1:-1,1:-1]
                            +UU[1:-1,1:-1]*G11_x[1:-1,1:-1] + VV[1:-1,1:-1]*G11_y[1:-1,1:-1])
    G12[1:-1,1:-1] += - dt*(U_dy[1:-1,1:-1]*G11[1:-1,1:-1] + V_dy[1:-1,1:-1]*G12[1:-1,1:-1]
                            +UU[1:-1,1:-1]*G12_x[1:-1,1:-1] + VV[1:-1,1:-1]*G12_y[1:-1,1:-1])
    G21[1:-1,1:-1] += - dt*(U_dx[1:-1,1:-1]*G21[1:-1,1:-1] + V_dx[1:-1,1:-1]*G22[1:-1,1:-1]
                            +UU[1:-1,1:-1]*G21_x[1:-1,1:-1] + VV[1:-1,1:-1]*G21_y[1:-1,1:-1])
    G12[1:-1,1:-1] += - dt*(U_dy[1:-1,1:-1]*G21[1:-1,1:-1] + V_dy[1:-1,1:-1]*G22[1:-1,1:-1]
                            +UU[1:-1,1:-1]*G22_x[1:-1,1:-1] + VV[1:-1,1:-1]*G22_y[1:-1,1:-1])
    

    # Boundaries 
    G11[0,1:-1] += - dt*(U_dx[0,1:-1]*G11[0,1:-1] + V_dx[0,1:-1]*G12[0,1:-1]
                            + VV[0,1:-1]*((G11[0,2:] - G11[0,:-2])/(2*dy)))
    G12[0,1:-1] += - dt*(U_dy[0,1:-1]*G11[0,1:-1] + V_dy[0,1:-1]*G12[0,1:-1]
                         + VV[0,1:-1]*((G12[0,2:] - G12[0,:-2])/(2*dy)))
    G21[0,1:-1] += - dt*(U_dx[0,1:-1]*G21[0,1:-1] + V_dx[0,1:-1]*G22[0,1:-1]
                            + VV[0,1:-1]*((G21[0,2:] - G21[0,:-2])/(2*dy)))
    G22[0,1:-1] += - dt*(U_dy[0,1:-1]*G21[0,1:-1] + V_dy[0,1:-1]*G22[0,1:-1]
                         + VV[0,1:-1]*((G22[0,2:] - G22[0,:-2])/(2*dy)))
    G11[-1,1:-1] += - dt*(U_dx[-1,1:-1]*G11[-1,1:-1] + V_dx[-1,1:-1]*G12[-1,1:-1]
                            + VV[-1,1:-1]*((G11[-1,2:] - G11[-1,:-2])/(2*dy)))
    G12[-1,1:-1] += - dt*(U_dy[-1,1:-1]*G11[-1,1:-1] + V_dy[-1,1:-1]*G12[-1,1:-1]
                         + VV[-1,1:-1]*((G12[-1,2:] - G12[-1,:-2])/(2*dy)))
    G21[-1,1:-1] += - dt*(U_dx[-1,1:-1]*G21[-1,1:-1] + V_dx[-1,1:-1]*G22[-1,1:-1]
                            + VV[-1,1:-1]*((G21[-1,2:] - G21[-1,:-2])/(2*dy)))
    G22[-1,1:-1] += - dt*(U_dy[-1,1:-1]*G21[-1,1:-1] + V_dy[-1,1:-1]*G22[-1,1:-1]
                         + VV[-1,1:-1]*((G22[-1,2:] - G22[-1,:-2])/(2*dy)))
    G11[1:-1,0] += - dt*(U_dx[1:-1,0]*G11[1:-1,0] + V_dx[1:-1,0]*G12[1:-1,0]
                         + UU[1:-1,0]*((G11[2:,0] - G11[:-2,0])/(2*dx)))
    G12[1:-1,0] += - dt*(U_dy[1:-1,0]*G11[1:-1,0] + V_dy[1:-1,0]*G12[1:-1,0]
                         + UU[1:-1,0]*((G12[2:,0] - G12[:-2,0])/(2*dx)))
    G21[1:-1,0] += - dt*(U_dx[1:-1,0]*G21[1:-1,0] + V_dx[1:-1,0]*G22[1:-1,0]
                         + UU[1:-1,0]*((G21[2:,0] - G21[:-2,0])/(2*dx)))
    G22[1:-1,0] += - dt*(U_dy[1:-1,0]*G21[1:-1,0] + V_dy[1:-1,0]*G22[1:-1,0]
                         + UU[1:-1,0]*((G22[2:,0] - G22[:-2,0])/(2*dx)))
    G11[1:-1,-1] += - dt*(U_dx[1:-1,-1]*G11[1:-1,-1] + V_dx[1:-1,-1]*G12[1:-1,-1]
                         + UU[1:-1,-1]*((G11[2:,-1] - G11[:-2,-1])/(2*dx)))
    G12[1:-1,-1] += - dt*(U_dy[1:-1,-1]*G11[1:-1,-1] + V_dy[1:-1,-1]*G12[1:-1,-1]
                         + UU[1:-1,-1]*((G12[2:,-1] - G12[:-2,-1])/(2*dx)))
    G21[1:-1,-1] += - dt*(U_dx[1:-1,-1]*G21[1:-1,-1] + V_dx[1:-1,-1]*G22[1:-1,-1]
                         + UU[1:-1,-1]*((G21[2:,-1] - G21[:-2,-1])/(2*dx)))
    G22[1:-1,-1] += - dt*(U_dy[1:-1,-1]*G21[1:-1,-1] + V_dy[1:-1,-1]*G22[1:-1,-1]
                         + UU[1:-1,-1]*((G22[2:,-1] - G22[:-2,-1])/(2*dx)))
    
    G11[0,0] += - dt*(U_dx[0,0]*G11[0,0] + V_dx[0,0]*G12[0,0])
    G12[0,0] += - dt*(U_dy[0,0]*G11[0,0] + V_dy[0,0]*G12[0,0])
    G21[0,0] += - dt*(U_dx[0,0]*G21[0,0] + V_dx[0,0]*G22[0,0])
    G22[0,0] += - dt*(U_dy[0,0]*G21[0,0] + V_dy[0,0]*G22[0,0])
    G11[-1,0] += - dt*(U_dx[-1,0]*G11[-1,0] + V_dx[-1,0]*G12[-1,0])
    G12[-1,0] += - dt*(U_dy[-1,0]*G11[-1,0] + V_dy[-1,0]*G12[-1,0])
    G21[-1,0] += - dt*(U_dx[-1,0]*G21[-1,0] + V_dx[-1,0]*G22[-1,0])
    G22[-1,0] += - dt*(U_dy[-1,0]*G21[-1,0] + V_dy[-1,0]*G22[-1,0])
    G11[0,-1] += - dt*(U_dx[0,-1]*G11[0,-1] + V_dx[0,-1]*G12[0,-1])
    G12[0,-1] += - dt*(U_dy[0,-1]*G11[0,-1] + V_dy[0,-1]*G12[0,-1])
    G21[0,-1] += - dt*(U_dx[0,-1]*G21[0,-1] + V_dx[0,-1]*G22[0,-1])
    G22[0,-1] += - dt*(U_dy[0,-1]*G21[0,-1] + V_dy[0,-1]*G22[0,-1])
    G11[-1,-1] += - dt*(U_dx[-1,-1]*G11[-1,-1] + V_dx[-1,-1]*G12[-1,-1])
    G12[-1,-1] += - dt*(U_dy[-1,-1]*G11[-1,-1] + V_dy[-1,-1]*G12[-1,-1])
    G21[-1,-1] += - dt*(U_dx[-1,-1]*G21[-1,-1] + V_dx[-1,-1]*G22[-1,-1])
    G22[-1,-1] += - dt*(U_dy[-1,-1]*G21[-1,-1] + V_dy[-1,-1]*G22[-1,-1])
    


CGbA = G11*G11 + G12*G12
CGbB = G11*G12 + G21*G22
CGbC = G12*G12 + G22*G22
trace = CGbA + CGbC
detrm = CGbA*CGbC - CGbB*CGbB
disrm = np.sqrt(trace**2 - 4*detrm) 
lambda_max = (trace + disrm) / 2
FTLEb = 0.5*np.log(lambda_max) / np.abs(T)

print(G11[0,0])
print(G12[0,0])
print(G22[0,0])

im = plt.imshow(FTLEb)
plt.colorbar(im)
plt.show()
